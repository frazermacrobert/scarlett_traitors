
function mulberry32(a){return function(){var t=a+=0x6D2B79F5;t=Math.imul(t^t>>>15,t|1);t^=t+Math.imul(t^t>>>7,t|61);return((t^t>>>14)>>>0)/4294967296;}}
function seededShuffle(arr,rng){const a=arr.slice();for(let i=a.length-1;i>0;i--){const j=Math.floor(rng()*(i+1));[a[i],a[j]]=[a[j],a[i]];}return a;}
const DIFF={Easy:{innocent_error:.04,traitor_rate:.50,influence_scale:.7,vote_noise:.05,pattern_clarity:1.0},Medium:{innocent_error:.12,traitor_rate:.40,influence_scale:.5,vote_noise:.12,pattern_clarity:.7},Hard:{innocent_error:.20,traitor_rate:.30,influence_scale:.3,vote_noise:.18,pattern_clarity:.5}};
function defaultInfluence(d){const m={"CEO":.75,"CFO":.68,"Exec Assistant":.65,"Project Management":.62,"Consultant":.60,"Finance":.56,"HR":.56,"Legal":.56,"Design":.52,"Content":.52,"Motion":.52,"Ops":.54,"Marketing":.54,"Business Development":.54,"IT":.58};return m[d]??.55;}
function defaultBehaviour(d){const b={safe:.7,risky:.2,decoy:.1};if(d==="Finance")return{safe:.6,risky:.3,decoy:.1};if(d==="Design"||d==="Content"||d==="Motion")return{safe:.65,risky:.2,decoy:.15};if(d==="Project Management")return{safe:.62,risky:.25,decoy:.13};return b;}
const S={allEmployees:[],actions:[],scenarios:[],elimMsgs:{},players:[],round:0,rng:Math.random,youId:null,traitors:new Set(),analysis:true,difficulty:"Medium",numTraitors:3,log:[],suspicion:{},alive:new Set(),eliminated:new Set()};
async function loadData(){const [emps,acts,scens,elim]=await Promise.all([fetch('data/employees.json').then(r=>r.json()),fetch('data/actions.json').then(r=>r.json()),fetch('data/scenarios.json').then(r=>r.json()),fetch('data/elimination_msgs.json').then(r=>r.json())]);S.allEmployees=emps;S.actions=acts;S.scenarios=scens;S.elimMsgs=elim;populatePlayerSelect(emps);}
function populatePlayerSelect(emps){const sel=document.getElementById('playerSelect');sel.innerHTML=emps.map(e=>`<option value="${e.id}">${e.name} — ${e.department}</option>`).join('');}
function startGame(){S.log=[];S.round=1;S.players=[];S.suspicion={};S.alive=new Set();S.eliminated=new Set();S.traitors=new Set();const you=S.allEmployees.find(e=>e.id===S.youId);const others=seededShuffle(S.allEmployees.filter(e=>e.id!==S.youId),S.rng).slice(0,9);const roster=[you,...others];S.players=roster.map(e=>({id:e.id,name:e.name,department:e.department,influence:defaultInfluence(e.department),behaviour:defaultBehaviour(e.department),role:"Innocent",status:"Alive",avatar:`assets/avatars/${e.id}.svg`,avatarSad:`assets/avatars/${e.id}-sad.svg`,votes:0}));S.players.forEach(p=>S.alive.add(p.id));const botIds=S.players.map(p=>p.id).filter(id=>id!==S.youId);seededShuffle(botIds,S.rng).slice(0,S.numTraitors).forEach(id=>S.traitors.add(id));S.players.forEach(p=>{if(S.traitors.has(p.id))p.role="Traitor";});S.players.forEach(p=>S.suspicion[p.id]=0);logLine(`Game started. Traitors assigned. Difficulty: ${S.difficulty}.`);renderAll();nextRound();}
function nextRound(){if(checkEnd())return;renderRoundInfo();doScenarioPhase();}
function checkEnd(){const alivePlayers=[...S.alive].map(id=>S.players.find(p=>p.id===id));const aliveTraitors=alivePlayers.filter(p=>S.traitors.has(p.id)).length;if(!S.alive.has(S.youId)){announce(`You were eliminated. Traitors win.`);return true;}if(aliveTraitors===0){announce(`All traitors eliminated. You win!`);return true;}if(aliveTraitors>=(alivePlayers.length-aliveTraitors)){announce(`Traitors took control. You lose.`);return true;}return false;}
function doScenarioPhase(){const container=document.getElementById('scenario');const sc=S.scenarios[Math.floor(S.rng()*S.scenarios.length)];container.innerHTML=`<h2>Scenario</h2>
<div>${sc.prompt}</div>
${sc.options.map((opt,i)=>`<label class="option"><input type="radio" name="scopt" value="${String.fromCharCode(65+i)}"> <strong>${String.fromCharCode(65+i)}.</strong> ${opt}</label>`).join('')}
<div class="footer"><div class="note">Choose wisely — wrong = instant elimination.</div><button id="answerBtn" class="btn">Submit</button></div>`;document.getElementById('answerBtn').onclick=()=>{const sel=document.querySelector('input[name=scopt]:checked');if(!sel)return;const pick=sel.value;if(pick===sc.correct){logLine(`Scenario answered correctly.`);if(S.analysis){logLine(`Analysis: ${sc.rationale_correct}`);}doActionsPhase();}else{logLine(`Scenario wrong: You picked ${pick}.`);if(S.analysis){logLine(`Analysis: ${sc.rationale_wrong}`);}eliminate(S.youId,false,"VotedOut");renderAll();checkEnd();}};}
function doActionsPhase(){const diff=DIFF[S.difficulty];const aliveIds=[...S.alive];const items=[];aliveIds.filter(id=>id!==S.youId).forEach(id=>{const player=S.players.find(p=>p.id===id);const isTraitor=S.traitors.has(id);let pool;if(isTraitor){const sabotage=Math.random()<diff.traitor_rate;pool=S.actions.filter(a=>a.bucket===(sabotage?"traitor_sabotage":(Math.random()<.5?"decoy":"safe")));}else{const err=Math.random()<diff.innocent_error;if(err){pool=S.actions.filter(a=>a.bucket==="risky_innocent");}else{pool=S.actions.filter(a=>a.bucket===(Math.random()<player.behaviour.safe?"safe":"decoy"));}}if(pool.length===0)return;const act=pool[Math.floor(Math.random()*pool.length)];items.push({player:player.id,text:act.description,risk:act.risk_level,suspicious:!!act.actually_suspicious});const add=act.risk_level*.8+(act.actually_suspicious?1.2:0)*DIFF[S.difficulty].pattern_clarity;S.suspicion[player.id]=Math.max(0,(S.suspicion[player.id]||0)*.75+add);});const div=document.getElementById('actions');div.innerHTML=`<h2>Daily Activity</h2><div class="actions-list">${items.map(a=>`<div class="action-item r${a.risk}"><strong>${nameOf(a.player)}</strong>: ${a.text} ${S.analysis? `<div class="note">${a.suspicious?'Looks truly risky.':(a.risk>0?'May look risky but could be benign.':'Safe.')}</div>`:''}</div>`).join('')}</div><div class="footer"><span class="note">Review behaviours, then vote for who to eliminate.</span></div>`;doVotingPhase();}
function doVotingPhase(){const voting=document.getElementById('voting');voting.innerHTML=`<h2>Voting</h2><div class="note">Click a player card to cast your vote. You vote first; bots follow or choose by suspicion.</div>`;document.querySelectorAll('.player-card').forEach(card=>{const id=card.dataset.id;if(S.alive.has(id)&&id!==S.youId){card.style.cursor='pointer';card.onclick=()=>{handlePlayerVote(id);}}else{card.onclick=null;card.style.cursor='default';}});}
function handlePlayerVote(targetId){logLine(`You voted for ${nameOf(targetId)}.`);const tally={};function addVote(id){tally[id]=(tally[id]||0)+1;}addVote(targetId);const diff=DIFF[S.difficulty];const aliveIds=[...S.alive];const candidates=aliveIds.filter(id=>id!==S.youId);aliveIds.forEach(id=>{if(id===S.youId)return;const p=S.players.find(x=>x.id===id);let sorted=candidates.filter(x=>x!==id).sort((a,b)=>(S.suspicion[b]||0)-(S.suspicion[a]||0));const baseTarget=sorted[0]??targetId;const follow=Math.random()<(p.influence*diff.influence_scale);let vote;if(follow)vote=targetId;else{if(Math.random()<diff.vote_noise){vote=sorted[Math.min(sorted.length-1,Math.floor(Math.random()*sorted.length))]||baseTarget;}else vote=baseTarget;}addVote(vote);});let maxVotes=-1,eliminated=null;Object.entries(tally).forEach(([id,v])=>{if(v>maxVotes){maxVotes=v;eliminated=id;}else if(v===maxVotes){if((S.suspicion[id]||0)>(S.suspicion[eliminated]||0))eliminated=id;}});const isTraitor=S.traitors.has(eliminated);eliminate(eliminated,isTraitor,"VotedOut");renderAll();logLine(`Eliminated: ${nameOf(eliminated)} (${isTraitor?'Traitor':'Innocent'}).`);if(!isTraitor){const innocents=[...S.alive].filter(id=>id!==S.youId&&!S.traitors.has(id));if(innocents.length){innocents.sort((a,b)=>{const pa=S.players.find(p=>p.id===a);const pb=S.players.find(p=>p.id===b);return (pb.influence-pa.influence)||((S.suspicion[a]||0)-(S.suspicion[b]||0));});const struck=innocents[0];eliminate(struck,false,"NightStrike");renderAll();logLine(`Night strike: ${nameOf(struck)} was eliminated by traitors.`);}}if(!checkEnd()){S.round+=1;renderRoundInfo();doScenarioPhase();}}
function eliminate(id,wasTraitorFlag,reason){if(!S.alive.has(id))return;S.alive.delete(id);S.eliminated.add(id);const p=S.players.find(x=>x.id===id);p.status="Eliminated";const card=document.querySelector(`.player-card[data-id="${id}"]`);if(card){card.classList.add('eliminated');card.classList.toggle('traitor',S.traitors.has(id));card.classList.toggle('innocent',!S.traitors.has(id));const img=card.querySelector('img');img.src=p.avatarSad;}const msg=S.elimMsgs[p.department]||`${p.department} in turmoil.`;if(reason==="NightStrike")logLine(`${msg}`);}
function nameOf(id){return S.players.find(p=>p.id===id)?.name||id;}
function renderRoundInfo(){const el=document.getElementById('roundInfo');el.innerHTML=`<h2>Round ${S.round}</h2><div class="note">Alive: ${S.alive.size} · Traitors unknown · Keep your wits about you.</div>`;}
function renderTopbar(){const top=document.getElementById('topbar');top.innerHTML=S.players.map(p=>{const cls=['player-card'];if(S.eliminated.has(p.id))cls.push('eliminated');let roleRevealed=S.eliminated.has(p.id);if(roleRevealed){cls.push(S.traitors.has(p.id)?'traitor':'innocent');}const tag=p.id===S.youId?`<div class="tag">You</div>`:'';const img=S.eliminated.has(p.id)?p.avatarSad:p.avatar;return `<div class="${cls.join(' ')}" data-id="${p.id}">${tag}<img src="${img}" alt="${p.name} avatar"><div class="name">${p.name}</div><div class="xmark">✕</div></div>`;}).join('');}
function logLine(t){S.log.push(t);const log=document.getElementById('log');log.innerHTML=`<h2>Log</h2><div class="note">${S.log.map(x=>`• ${x}`).join('<br>')}</div>`;}
function announce(msg){const scenario=document.getElementById('scenario');scenario.innerHTML=`<h2>Outcome</h2><div>${msg}</div><div class="footer"><button class="btn" onclick="location.reload()">Play Again</button></div>`;}
function renderAll(){renderTopbar();}
document.getElementById('restartBtn').onclick=()=>location.reload();
window.addEventListener('DOMContentLoaded',async()=>{await loadData();const startModal=document.getElementById('startModal');document.getElementById('startBtn').onclick=()=>{const you=document.getElementById('playerSelect').value;const diff=document.getElementById('difficulty').value;const analysis=document.getElementById('analysisMode').value==='true';const numT=parseInt(document.getElementById('numTraitors').value,10)||3;const seedStr=document.getElementById('seed').value.trim();let seed=0;if(seedStr){seed=0;for(let i=0;i<seedStr.length;i++){seed=((seed<<5)-seed)+seedStr.charCodeAt(i);seed|=0;}if(seed<0)seed=-seed;}else{seed=Math.floor(Math.random()*1e9);}S.rng=mulberry32(seed);S.youId=you;S.difficulty=diff;S.analysis=analysis;S.numTraitors=numT;startModal.style.display='none';startGame();};});
